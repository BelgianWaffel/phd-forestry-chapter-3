// Update activated road segments
LSEVENT: UpdateRoadSegments

DEFINITIONS
   GLOBAL CONSTANT: CellWidth
   LAYER: RoadSegmentId, RoadBackbone, RoadType, Visited

   // Road types
   GLOBAL CONSTANT: activeRoad, newlyActiveRoad, reactivatedRoad, newlyActiveSpur, activeSpur, inactiveRoad

   GLOBAL VARIABLE: BaseTimestep

   // Road segment list
   GLOBAL CONSTANT: rRoadType, rState, rNextSegmentId, rEndRow, rEndCol
   GLOBAL VARIABLE: RoadSegmentTable[]

   GLOBAL VARIABLE: KmRoadsBuilt[]

   EVENT VARIABLE: activationType
   CLUSTER VARIABLE: initialSegmentId
   CELL VARIABLE: currSegment

   CONSTANT: pi = 3.141592654
ENDDEF


RETURNTIME
  RETURNTIME = IF Time EQ 0 THEN 0.0001 ELSE BaseTimestep
  Visited = 0
ENDRT


// Only need to visit road start points
EVENTLOCATION
   STATIC REGION WHOLE MAP
      DECISION (RoadSegmentId > 0) AND (ROW(Location) EQ RoadSegmentTable[RoadSegmentId, rEndRow]) AND (COL(Location) EQ RoadSegmentTable[RoadSegmentId, rEndCol])// start at end
ENDEL


// dynamic part: newly activated and reactivated roads
PROBINIT
   PROBINIT = (RoadSegmentTable[RoadSegmentId, rState] EQ newlyActiveRoad) OR (RoadSegmentTable[RoadSegmentId, rState] EQ reactivatedRoad)
   activationType = RoadSegmentTable[RoadSegmentId, rState]
   initialSegmentId = RoadSegmentId
ENDPI


TRANSITIONS
   TRANSITIONS = TRUE

   IF activationType EQ newlyActiveRoad
      // Count roads built
      KmRoadsBuilt[newlyActiveRoad] = KmRoadsBuilt[newlyActiveRoad] + ((RoadType EQ 0) OR (RoadType EQ inactiveRoad)) * CellWidth/1000
   ENDFN

   RoadType = activeRoad
   currSegment = RoadSegmentId
   RoadSegmentTable[RoadSegmentId, rState] = activeRoad

   Visited = initialSegmentId 
ENDTR


SPREADTIME = -1  // process clustes sequentially (spread before initiating next cluster)


// Don't allow spread from a non-backbone cell to the backbone
SPREADLOCATION
   REGION CENTRED(1, 1.5)
//      DECISION (SOURCE RoadBackbone <= RoadBackbone) AND (RoadType EQ 0) AND (RoadSegmentId > 0) AND ((RoadSegmentId EQ currSegment) OR (RoadSegmentId EQ RoadSegmentTable[currSegment, rNextSegmentId]))
      DECISION (SOURCE RoadBackbone <= RoadBackbone) AND (Visited NEQ initialSegmentId ) AND (RoadSegmentId > 0) AND ((RoadSegmentId EQ currSegment) OR ((SOURCE RoadBackbone EQ 1) AND (RoadSegmentId EQ RoadSegmentTable[currSegment, rNextSegmentId])))
ENDSL
