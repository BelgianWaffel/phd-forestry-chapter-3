LSEVENT: Insect

DEFINITIONS
   LAYER: StandAge, Ecoregion, Species, Species2  //, Host    // Input layers
   LAYER: StudyArea, PctCohort2 , StandAge2 
   LAYER: LastDisturbance, AttackedSB, PreDisturbanceAge, SBWMortality //, PctDefol 

   LAYER: VolIncLoss1, VolIncLoss2

   LAYER: BDP     // Output layers  -- > BDP being the most important

   GLOBAL CONSTANT: SRDLookup[],CellWidth, NumHost, SppLookup[], VolEffectsLookup[]
   GLOBAL CONSTANT: HaPerCell, MaxTimeSinceDisturbance, MaxStandAge, rSBW1, rSBW2, rSBW3

   GLOBAL CONSTANT: sBb, sPe, sPg, sE, sS, sMe, sC, sUnk
   
   GLOBAL VARIABLE: BaseTimestep, SBWDur[], DispersalDist
   GLOBAL VARIABLE: inOutbreak 
   GLOBAL VARIABLE: SBWSchedIndex, AreaDefoliated 
   LOCAL: SBWtypeDamage

   CLUSTER VARIABLE: StartLocation, yearInPeriod, endOutbreak, startTime
   CLUSTER VARIABLE: ProbMortality // stochastic death probability for each cluster..local effect

   CELL VARIABLE: distInc, d


   CONSTANT: stepTime = 0.000001

ENDDEF


INITIALSTATE
  INITIALSTATE = 1
  DispersalDist = MAX((DispersalDist/CellWidth), 1)  // how far does the defoliation front move in a year?  default 1000km (20 000 cellls)
ENDIS

   
RETURNTIME
   RETURNTIME = IF (inOutbreak EQ 1) THEN BaseTimestep ELSE 0.1
   SBWtypeDamage =0
ENDRT


EVENTLOCATION
   REGION WHOLE MAP
      DECISION (Species > 0) AND (StudyArea > 0)   // only intitiate in forested cells
ENDEL


NUMCLUSTERS
   NUMCLUSTERS = ROUND(UNIFORM(2, 5)) // ######  // insert variable here

   yearInPeriod = MIN(FLOOR(UNIFORM(0, BaseTimestep)), BaseTimestep-1)

   // Pick a duration for each cluster 
   endOutbreak = CEIL(Time + SBWDur[SBWSchedIndex])  
   startTime = Time

   //Assign cluster specific mortality prob.- emulating stochastic site specific stress.
   ProbMortality = ROUND(UNIFORM(0, 100)) 

ENDNC


PROBINIT ORDERED
   PROBINIT = BDP // will chose a random "NUMCLUSTER" cells to start in with the highest BDP value (100)
   StartLocation = Location
   distInc = 0
   d = 0
ENDPI

TRANSITIONS 

   IF (BDP> 0) AND (inOutbreak EQ 1)

      ProbMort1 = 0
      ProbMort2 = 0

      // Calculate "intensity"
      //////////////////////////////////////////////////////////
      Intensity = IF (BDP > 0) AND (BDP <= 33) THEN 1 
                  ELSE IF (BDP > 33) AND (BDP <= 66) THEN 2 
                  ELSE IF (BDP > 66) THEN 3 
                  ELSE 0

      //////////////////////////////////////////////////////////

      LeadSpp1 = SppLookup[Species, 0]
      SecondSpp1 = SppLookup[Species, 1]

      idLead1 = IF (LeadSpp1 == sE) THEN 3 
                ELSE IF (LeadSpp1 == sS) THEN 2
                ELSE 1

      idSecond1 = IF (SecondSpp1 == sE) THEN 3 
                  ELSE IF (SecondSpp1 == sS) THEN 2
                  ELSE 1

      //////////////////////////////////////////////////////////
      IF (PctCohort2 >0)

         LeadSpp2 = SppLookup[Species2, 0]
         SecondSpp2 = SppLookup[Species2, 1]

         idLead2 = IF (LeadSpp2 == sE) THEN 3 
                   ELSE IF (LeadSpp2 == sS) THEN 2
                   ELSE 1
  
         idSecond2 = IF (SecondSpp2 == sE) THEN 3 
                     ELSE IF (SecondSpp2 == sS) THEN 2
                     ELSE 1
      END

      //////////////////////////////////////////////////////////

      northDiff = (UNIFORM(0,1) > 0.5) // probability of a spruce in the north being a black spruce.

      IF (Ecoregion == 2) AND (northDiff)
         IF (idLead1 == 3) 
           idLead1 = 4  // Black Spruce
         END   
         IF (idSecond1 == 3) 
           idSecond1 = 4 // Black Spruce 
         END   
         IF (PctCohort2 >0)
            IF (idLead2 == 3) 
               idLead2 = 4  // Black Spruce
            END   
            IF (idSecond2 == 3) 
               idSecond2 = 4 // Black Spruce 
            END   
         END
      END

      //////////////////////////////////////////////////////////
      SRDCol = IF Intensity == 1 THEN 5 
               ELSE IF Intensity == 2 THEN 4 
               ELSE 3

      SRDLead1      = IF (StandAge >= SRDLookup[idLead1, SRDCol]) THEN 100 ELSE 0  
      SRDSecondary1 = IF (StandAge >= SRDLookup[idSecond1, SRDCol]) THEN 100 ELSE 0  

      ProbMort1 = ((0.67 * SRDLead1) + (0.33 * SRDSecondary1)) 

      IF (PctCohort2 >0)

         SRDLead2 = IF (StandAge2 >= SRDLookup[idLead2, SRDCol]) THEN 100 ELSE 0  
         SRDSecondary2 = IF (StandAge2 >= SRDLookup[idSecond2, SRDCol]) THEN 100 ELSE 0  

         ProbMort2 = ((0.67 * SRDLead2) + (0.33 * SRDSecondary2)) 

      END

      // #########################################################################################

      IF (PctCohort2 <= 0) // 1 Cohort   
         IF (ProbMort1 >= ProbMortality ) 
            SBWtypeDamage = 1  
            VolDiff1 = 0
            VolDiff2 = 0
         ELSE 
            SBWtypeDamage = 0  
            VolDiff1 = FLOOR((ProbMort1/ProbMortality )*100)
            VolDiff2 = 0
         END

      ELSE // 2 cohorts

         IF ((ProbMort1 >= ProbMortality ) AND (ProbMort2 >= ProbMortality ))
            SBWtypeDamage = 1 // Host in both cohorts killed
            VolDiff1 = 0
            VolDiff2 = 0
         ELSE IF ((ProbMort1 >= ProbMortality ) AND (ProbMort2 < ProbMortality ))
            SBWtypeDamage = 2 // Only host in cohorts 1 killed
            VolDiff1 = 0
            VolDiff2 = FLOOR((ProbMort2/ProbMortality )*100)
         ELSE IF ((ProbMort1 < ProbMortality ) AND (ProbMort2 >= ProbMortality ))
            SBWtypeDamage = 3 // Cohort 2 killed
            VolDiff1 = FLOOR((ProbMort1/ProbMortality )*100)
            VolDiff2 = 0
         ELSE IF ((ProbMort1 < ProbMortality ) AND (ProbMort2 < ProbMortality ))
            SBWtypeDamage = 0 // Vol loss to cohort 1
            VolDiff1 = FLOOR((ProbMort1/ProbMortality )*100)
            VolDiff2 = FLOOR((ProbMort2/ProbMortality )*100)
         ELSE
            SBWtypeDamage = 0
            VolDiff1 = 0
            VolDiff2 = 0
         END
      END
     
      // Difference between BDP and ProbMortality.
      VD1 = ((VolDiff1 > 80) + (VolDiff1 > 85) + (VolDiff1 > 90) + (VolDiff1 > 95))
      VD2 = ((VolDiff2 > 80) + (VolDiff2 > 85) + (VolDiff2 > 90) + (VolDiff2 > 95))

      VolIncLoss1 = IF (VD1> 0) THEN VolEffectsLookup[VD1] ELSE 0
      VolIncLoss2 = IF (VD2> 0) THEN VolEffectsLookup[VD2] ELSE 0

   END

   // #################################################
   // ###  SBW Damage Key  ###
   // #################################################
   //    1: cohort 1 OR (1 and 2) killed
   //    2: only cohort 1 killed
   //    3: only cohort 2 killed     
   //    XXX4: Volume loss from cohort 1, cohort 2 killed **
   //    XXX5: Volume loss from cohort 1
   // #################################################

   conTinue = ((MaxTimeSinceDisturbance - AttackedSB) > CEIL(SBWDur[SBWSchedIndex])) AND (Time < endOutbreak) AND (SBWtypeDamage > 0) 

   TRANSITIONS = conTinue

   SBWMortality = SBWtypeDamage
   LastDisturbance  = IF (SBWtypeDamage EQ 1) THEN rSBW1 
                      ELSE IF (SBWtypeDamage EQ 2) THEN rSBW2  
                      ELSE rSBW3 // flags for succession.lse
   // StandAge  = yearInPeriod  // dealt with in succession.lse 
   AttackedSB = MaxTimeSinceDisturbance //- yearInPeriod //$$ don't do the yearinPeriod thing here to allow for a clear 10 year lag for fbp effects
   AreaDefoliated = AreaDefoliated + 1
   
ENDTR

// Rate of spread dependent or duration of outbreak. //
// Longer outbreaks will result in more extensive damage, and hence, the SBW should spread more quickly to 'simulate' 
// those effects. This follows a tradition where the effects are being modelled moreso than the process.


SPREADTIMESTEP
   // Variable spread timestep 
   // check if we are spanning a year boundary
   pYearNow = ((Time - startTime) / stepTime) / DispersalDist // time minus start time is "distance" spread, and DispersalDist is spread distance/year
   
   IF (FLOOR(pYearNow/BaseTimestep) < FLOOR((pYearNow + distInc/DispersalDist)/BaseTimestep)) AND ((Time + BaseTimestep) < endOutbreak)
      TStep = (stepTime * distInc) + BaseTimestep // jump a year, so long as we don't exceed outbreak duration
   ELSE 
      TStep = stepTime * distInc 
   END

   SPREADTIMESTEP = TStep

ENDST


SPREADLOCATION
  REGION CENTRED(1, 2.9)  // to 25 neighbours; here means from focal cell to ~100m. - combine w/ dispersal kernal
  //REGION CENTRED(1, 1.4)  // to 8 nearest neighbours; here means from focal cell to ~50m. No dispersal kernal
      DECISION (BDP > 50) 
ENDSL


SPREADPROB
   SPREADPROB = (BDP/100) 

   d = ROUND(DISTANCE(StartLocation, Location))
   distInc = MAX(0,d - SOURCE d) * (2^(5* (1- (BDP/100) )))  // make cells with low bdp v. hard to move through - borrowed from fire model
ENDSP
    

